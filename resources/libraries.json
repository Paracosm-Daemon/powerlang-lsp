[{"api":[{"description":"This function creates a new BrickColor object based on the provided input value and returns it. It throws an error if insufficient arguments are provided.","name":"new","parameters":[{"name":"Value","type":"any"}],"return":["BrickColor"]},{"description":"This function generates a block to produce a random BrickColor value and returns it.","name":"random","parameters":[],"return":["BrickColor"]}],"name":"BrickColor"},{"api":[{"description":"Constructs a new CFrame from position and rotation vectors. Takes 2 arguments: Position (Vector3) and Rotation (Vector3), returns a CFrame.","name":"new","parameters":[{"name":"Position","type":"Vector3"},{"name":"Rotation","type":"Vector3"}],"return":[]},{"description":"Splits a CFrame into its position and rotation components. Requires 1 argument: CFrame, and returns Position (Vector3) and Rotation (Vector3).","name":"split","parameters":[{"name":"CFrame","type":"CFrame"}],"return":[]},{"description":"Performs linear interpolation between two CFrame values. Takes 3 arguments: StartCFrame, GoalCFrame, and Alpha (number), returns the resulting CFrame.","name":"lerp","parameters":[{"name":"StartCFrame","type":"CFrame"},{"name":"GoalCFrame","type":"CFrame"},{"name":"Alpha","type":"number"}],"return":[]},{"description":"Returns the inverse of the given CFrame. Takes 1 argument: CFrame, and returns the inverted CFrame.","name":"inverse","parameters":[{"name":"CFrame","type":"CFrame"}],"return":[]},{"description":"Converts a CFrame to object space relative to another CFrame. Requires 2 arguments: CFrame and ObjectCFrame, returns the resulting CFrame.","name":"toObjectSpace","parameters":[{"name":"CFrame","type":"CFrame"},{"name":"ObjectCFrame","type":"CFrame"}],"return":[]},{"description":"Converts a CFrame to world space relative to another CFrame. Requires 2 arguments: CFrame and ObjectCFrame, returns the resulting CFrame.","name":"toWorldSpace","parameters":[{"name":"CFrame","type":"CFrame"},{"name":"ObjectCFrame","type":"CFrame"}],"return":[]},{"description":"Gets the specified direction vector (forward, backward, left, etc.) from the CFrame. Requires 2 arguments: CFrame and Direction (string), returns the direction vector.","name":"direction","parameters":[{"name":"CFrame","type":"CFrame"},{"name":"Direction","type":"string"}],"return":[]},{"description":"Constructs a CFrame using Euler angles. Takes 3 arguments: rx, ry, and rz (rotations around the x, y, and z axes), returns the resulting CFrame.","name":"Angles","parameters":[{"name":"rx","type":"number"},{"name":"ry","type":"number"},{"name":"rz","type":"number"}],"return":[]},{"description":"Converts a CFrame to its corresponding Euler angles. Requires 1 argument: CFrame, returns the rotation angles rx, ry, and rz.","name":"toEulerAnglesXYZ","parameters":[{"name":"CFrame","type":"CFrame"}],"return":[]},{"description":"Constructs a CFrame from a position vector and three directional vectors. Takes 4 arguments: Position, vX, vY, and vZ, returns the resulting CFrame.","name":"fromMatrix","parameters":[{"name":"Position","type":"Vector3"},{"name":"vX","type":"Vector3"},{"name":"vY","type":"Vector3"},{"name":"vZ","type":"Vector3"}],"return":[]},{"description":"Constructs a CFrame from an axis and a rotation angle. Takes 2 arguments: v (axis vector) and r (rotation angle), returns the resulting CFrame.","name":"fromAxisAngle","parameters":[{"name":"v","type":"Vector3"},{"name":"r","type":"number"}],"return":[]}],"name":"CFrame"},{"api":[{"description":"This function constructs a Color3 object from the given RGB values and returns it. It requires three arguments.","name":"fromRGB","parameters":[{"name":"R","type":"number"},{"name":"G","type":"number"},{"name":"B","type":"number"}],"return":["Color3"]},{"description":"This function splits a Color3 object into its individual RGB components and returns them as separate outputs.","name":"split","parameters":[{"name":"Color3","type":"Color3"}],"return":["R: number","G: number","B: number"]},{"description":"This function converts a Color3 object into a BrickColor object and returns it. It requires one argument.","name":"toBrickColor","parameters":[{"name":"Color3","type":"Color3"}],"return":["BrickColor"]},{"description":"This function converts a BrickColor object into a Color3 object and returns it. It requires one argument.","name":"fromBrickColor","parameters":[{"name":"BrickColor","type":"BrickColor"}],"return":["Color3"]},{"description":"This function converts a Color3 object to its HSV components and returns them as separate outputs.","name":"toHSV","parameters":[{"name":"Color3","type":"Color3"}],"return":["Hue: number","Saturation: number","Value: number"]},{"description":"This function constructs a Color3 object from given HSV values and returns it. It requires three arguments.","name":"fromHSV","parameters":[{"name":"Hue","type":"number"},{"name":"Saturation","type":"number"},{"name":"Value","type":"number"}],"return":["Color3"]}],"name":"Color3"},{"api":[{"description":"This function creates a new instance of the specified class and returns the created object. It requires two arguments: the class name and the parent instance.","name":"new","parameters":[{"name":"ClassName","type":"string"},{"name":"Parent","type":"Instance"}],"return":["Instance"]}],"name":"Instance"},{"api":[{"description":"This function creates a new NumberRange object with the specified minimum and maximum values and returns it. It requires two arguments.","name":"new","parameters":[{"name":"Min","type":"number"},{"name":"Max","type":"number"}],"return":["NumberRange"]},{"description":"This function splits a NumberRange object into its minimum and maximum components and returns them as separate outputs.","name":"split","parameters":[{"name":"NumberRange","type":"NumberRange"}],"return":["Min: number","Max: number"]}],"name":"NumberRange"},{"api":[{"description":"This function creates a new UDim2 object with the specified X and Y scale and offset values, and returns it. It requires four arguments.","name":"new","parameters":[{"name":"XScale","type":"number"},{"name":"XOffset","type":"number"},{"name":"YScale","type":"number"},{"name":"YOffset","type":"number"}],"return":["UDim2"]},{"description":"This function splits a UDim2 object into its X scale, X offset, Y scale, and Y offset components, returning them as separate outputs.","name":"split","parameters":[{"name":"UDim2","type":"UDim2"}],"return":["XScale: number","XOffset: number","YScale: number","YOffset: number"]}],"name":"UDim2"},{"api":[{"description":"This function creates a new Vector2 object with the specified X and Y coordinates and returns it. It requires two arguments.","name":"new","parameters":[{"name":"X","type":"number"},{"name":"Y","type":"number"}],"return":["Vector2"]},{"description":"This function splits a Vector2 object into its X and Y components and returns them as separate outputs.","name":"split","parameters":[{"name":"Vector2","type":"Vector2"}],"return":["X: number","Y: number"]}],"name":"Vector2"},{"api":[{"description":"Creates a new Vector3 object with the specified X, Y, and Z coordinates and returns it. Requires three arguments.","name":"new","parameters":[{"name":"X","type":"number"},{"name":"Y","type":"number"},{"name":"Z","type":"number"}],"return":["Vector3"]},{"description":"Splits a Vector3 object into its X, Y, and Z components and returns them as separate outputs.","name":"split","parameters":[{"name":"Vector3","type":"Vector3"}],"return":["X: number","Y: number","Z: number"]},{"description":"Calculates the distance between two points represented by Vector3 objects and returns the distance as a number.","name":"magnitude","parameters":[{"name":"Point1","type":"Vector3"},{"name":"Point2","type":"Vector3"}],"return":["Distance: number"]},{"description":"Calculates the rotation vector between two Vector3 points and returns it as a new Vector3.","name":"rotation","parameters":[{"name":"Point1","type":"Vector3"},{"name":"Point2","type":"Vector3"}],"return":["RotationVector3: Vector3"]},{"description":"Normalizes the given Vector3 and returns the normalized result as a new Vector3.","name":"normalize","parameters":[{"name":"Vector3","type":"Vector3"}],"return":["Result: Vector3"]},{"description":"Computes the dot product of two Vector3 objects and returns the result as a number.","name":"dot","parameters":[{"name":"VectorA","type":"Vector3"},{"name":"VectorB","type":"Vector3"}],"return":["Result: number"]},{"description":"Computes the cross product of two Vector3 objects and returns the result as a new Vector3.","name":"cross","parameters":[{"name":"VectorA","type":"Vector3"},{"name":"VectorB","type":"Vector3"}],"return":["Result: Vector3"]}],"name":"Vector3"},{"api":[{"description":"Saves a variable in the datastore. Requires 2-3 arguments: Value (any type), Key (string), and an optional Shared (boolean). Returns a success status as a boolean (Success).","name":"SaveVariable","parameters":[{"name":"Value","type":"any"},{"name":"Key","type":"string"},{"name":"Shared","type":"bool?"}],"return":[]},{"description":"Loads a variable from the datastore. Requires 1-2 arguments: Key (string) and an optional Shared (boolean). Returns two outputs: Success (boolean) indicating if the load was successful and LoadedData (any type) with the loaded value.","name":"LoadVariable","parameters":[{"name":"Key","type":"string"},{"name":"Shared","type":"bool?"}],"return":[]},{"description":"Saves an instance (model) in the datastore. Requires 2-3 arguments: Model (of type Instance), Key (string), and an optional Shared (boolean). Returns a success status as a boolean (Success).","name":"SaveInstance","parameters":[{"name":"Model","type":"Instance"},{"name":"Key","type":"string"},{"name":"Shared","type":"bool?"}],"return":[]},{"description":"Loads an instance from the datastore. Requires 2-3 arguments: Key (string), Parent (Instance), and an optional Shared (boolean). Returns two outputs: Success (boolean) indicating if the load was successful and LoadedModel (Instance) representing the loaded instance/model.","name":"LoadInstance","parameters":[{"name":"Key","type":"string"},{"name":"Parent","type":"Instance"},{"name":"Shared","type":"bool?"}],"return":[]}],"name":"DataStore"},{"api":[{"description":"Adds an object to the Debris service, which automatically removes the object after a specified amount of time. Requires 2 arguments: Object (an instance to be added) and Time (a number representing the time in seconds before the object is removed).","name":"AddItem","parameters":[{"name":"Object","type":"Instance"},{"name":"Time","type":"number"}],"return":[]}],"name":"Debris"},{"api":[{"description":"Computes a path from a starting position to an ending position using Roblox's pathfinding service. Requires 2 arguments: StartPosition (of type Vector3) representing the starting point and EndPosition (of type Vector3) representing the destination. Returns a table of Vector3s representing the computed path.","name":"ComputePath","parameters":[{"name":"StartPosition","type":"Vector3"},{"name":"EndPosition","type":"Vector3"}],"return":[]}],"name":"Pathfinding"},{"api":[{"description":"Registers a new collision group in the physics service. Requires 2 arguments: GroupName (string) representing the name of the collision group and Unregister (boolean) indicating whether to unregister the group. Returns nil.","name":"RegisterCollisionGroup","parameters":[{"name":"GroupName","type":"string"},{"name":"Unregister","type":"bool"}],"return":[]},{"description":"Sets the collidable status between two collision groups. Requires 3 arguments: GroupName1 (string), GroupName2 (string), and Collidable (boolean) indicating whether the groups should be collidable with each other. Returns nil.","name":"SetCollidable","parameters":[{"name":"GroupName1","type":"string"},{"name":"GroupName2","type":"string"},{"name":"Collidable","type":"bool"}],"return":[]}],"name":"PhysicsService"},{"api":[{"description":"Retrieves the player associated with a given character model. Requires 1 argument: Character (of type Model) representing the character model. Returns the corresponding Player object.","name":"GetPlayerFromCharacter","parameters":[{"name":"Character","type":"Model"}],"return":[]},{"description":"Sets the mouse cursor icon locally for the player. Requires 1 argument: Icon (string) representing the icon's asset ID or URL. Returns nil.","name":"SetMouseIconLocal","parameters":[{"name":"Icon","type":"string"}],"return":[]},{"description":"Asynchronously retrieves the username associated with a given user ID. Requires 1 argument: UserId (number) representing the player's user ID. Returns the corresponding username (string).","name":"GetNameFromUserIdAsync","parameters":[{"name":"UserId","type":"number"}],"return":[]},{"description":"Asynchronously retrieves the user ID associated with a given username. Requires 1 argument: Username (string) representing the player's username. Returns the corresponding user ID (number).","name":"GetUserIdFromNameAsync","parameters":[{"name":"Username","type":"string"}],"return":[]},{"description":"Unbans a player by their user ID. Requires 1 argument: UserId (number) representing the player's user ID. Returns nil.","name":"UnbanPlayer","parameters":[{"name":"UserId","type":"number"}],"return":[]},{"description":"Checks if a player is banned based on their user ID. Requires 1 argument: UserId (number) representing the player's user ID. Returns a boolean indicating whether the player is banned.","name":"IsPlayerBanned","parameters":[{"name":"UserId","type":"number"}],"return":[]}],"name":"Players"},{"api":[{"description":"Casts a ray from a specified origin in a given direction and checks for intersections with parts in the game. Requires 4 arguments: Origin (Vector3), Direction (Vector3), FilterType (\"Whitelist\" or \"Blacklist\") to specify the filter type, and FilterDescendantsTable (table of Instances) to filter which parts to check against. Returns the intersected Instance, the intersection Position (Vector3), and the surface Normal (Vector3) at the point of intersection.","name":"findPart","parameters":[{"name":"Origin","type":"Vector3"},{"name":"Direction","type":"Vector3"},{"name":"FilterType","type":"string"},{"name":"FilterDescendantsTable","type":"{Instance}"}],"return":[]}],"name":"Ray"},{"api":[{"description":"Tweens a specified property of an object to a target value over a specified duration. The function requires the following arguments: Object (Instance) - the object to tween, Property (string) - the name of the property to tween, Value (any) - the target value, and Time (number) - the duration of the tween. Optional parameters include EasingStyle (string) - the easing style, EasingDirection (string) - the easing direction, RepeatCount (number) - the number of times to repeat the tween, and Reverses (bool) - whether the tween should reverse after completing. This function does not return any outputs.","name":"TweenProperty","parameters":[{"name":"Object","type":"Instance"},{"name":"Property","type":"string"},{"name":"Value","type":"any"},{"name":"Time","type":"number"},{"type":" string","name":"EasingStyle","default":"\"Linear\""},{"type":" string","name":"EasingDirection","default":"\"InOut\""},{"type":" number","name":"RepeatCount","default":"1"},{"type":" bool","name":"Reverses","default":"false"}],"return":[]}],"name":"TweenService"},{"api":[{"description":"Inserts a new RetroStudio Visual Scripting block with the specified name and ID, taking additional arguments as inputs. Requires at least two arguments: BlockName (friendly name) and BlockID (block ID).","name":"InsertBlock","parameters":[{"name":"BlockName","type":"string"},{"name":"BlockID","type":"string"},{"name":"...args","type":"any"}],"return":[]},{"description":"Inserts a new RetroStudio Visual Scripting block connected to the last created block, taking additional arguments as inputs. Requires at least two arguments: BlockName and BlockID.","name":"InsertBlockConnectedLast","parameters":[{"name":"BlockName","type":"string"},{"name":"BlockID","type":"string"},{"name":"...args","type":"any"}],"return":[]},{"description":"Returns the current Powerlang version as a string. An example output would be: Beta 0.9.","name":"version","parameters":[],"return":["string"]},{"description":"Returns the Powerlang credits string. Currently this is:\nPowerlang - The Ultimate Programming Language (c) vopwn55, 2024Special thanks to: NicePotato - Being a good friend RJAI - Emotional Support","name":"credits","parameters":[],"return":["string"]}],"name":"compiler"},{"api":[{"description":"Returns the absolute value of x.","name":"abs","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the arc cosine of x in radians.","name":"acos","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the arc sine of x in radians.","name":"asin","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the arc tangent of x in radians.","name":"atan","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the smallest integer greater than or equal to x.","name":"ceil","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the cosine of x (in radians).","name":"cos","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the hyperbolic cosine of x.","name":"cosh","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Converts x from radians to degrees.","name":"deg","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns e raised to the power of x.","name":"exp","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the largest integer less than or equal to x.","name":"floor","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Breaks x into its normalized fraction and exponent.","name":"frexp","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the base-10 logarithm of x.","name":"log10","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the integer and fractional parts of x.","name":"modf","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Converts x from degrees to radians.","name":"rad","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Seeds the random number generator with the given seed.","name":"randomseed","parameters":[{"name":"seed","type":"number"}],"return":[]},{"description":"Rounds x to the nearest integer.","name":"round","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the sign of x: -1 if x is negative, 1 if positive, and 0 if zero.","name":"sign","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the sine of x (in radians).","name":"sin","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the hyperbolic sine of x.","name":"sinh","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the square root of x.","name":"sqrt","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the tangent of x (in radians).","name":"tan","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the hyperbolic tangent of x.","name":"tanh","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the arc tangent of y/x in radians.","name":"atan2","parameters":[{"name":"y","type":"number"},{"name":"x","type":"number"}],"return":[]},{"description":"Returns the remainder of a divided by b.","name":"fmod","parameters":[{"name":"a","type":"number"},{"name":"b","type":"number"}],"return":[]},{"description":"Returns the mantissa and exponent of x.","name":"idexp","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the natural logarithm of x.","name":"log","parameters":[{"name":"x","type":"number"}],"return":[]},{"description":"Returns the maximum of a and b.","name":"max","parameters":[{"name":"a","type":"number"},{"name":"b","type":"number"}],"return":[]},{"description":"Returns the minimum of a and b.","name":"min","parameters":[{"name":"a","type":"number"},{"name":"b","type":"number"}],"return":[]},{"description":"Returns base raised to the power of exponent.","name":"pow","parameters":[{"name":"base","type":"number"},{"name":"exponent","type":"number"}],"return":[]},{"description":"Returns a random number in the range.","name":"random","parameters":[{"name":"min","type":"number"},{"name":"max","type":"number"}],"return":[]},{"description":"Clamps value between min and max.","name":"clamp","parameters":[{"name":"value","type":"number"},{"name":"min","type":"number"},{"name":"max","type":"number"}],"return":[]},{"description":"Returns the noise value for x.","name":"noise","parameters":[{"name":"x","type":"number"}],"return":[]}],"name":"math"},{"api":[{"description":"Splits string into a table using separator.","name":"split","parameters":[{"name":"string","type":"string"},{"name":"separator","type":"string"}],"return":["table"]},{"description":"Finds the pattern in string and returns its position.","name":"find","parameters":[{"name":"string","type":"string"},{"name":"pattern","type":"string"}],"return":["number"]},{"description":"Returns the substring of string from start to end.","name":"sub","parameters":[{"name":"string","type":"string"},{"name":"start","type":"number"},{"name":"end","type":"number"}],"return":["string"]},{"description":"Replaces occurrences of pattern in string with replacement.","name":"gsub","parameters":[{"name":"string","type":"string"},{"name":"pattern","type":"string"},{"name":"replacement","type":"string"}],"return":["string"]},{"description":"Returns the length of string.","name":"length","parameters":[{"name":"string","type":"string"}],"return":["number"]},{"description":"Converts string to uppercase.","name":"upper","parameters":[{"name":"string","type":"string"}],"return":["string"]},{"description":"Converts string to lowercase.","name":"lower","parameters":[{"name":"string","type":"string"}],"return":["string"]},{"description":"Filters characters in string using the Roblox filter.","name":"filter","parameters":[{"name":"string","type":"string"}],"return":["string"]}],"name":"string"},{"api":[{"description":"Creates a new table and appends the provided values as its members.","name":"create","parameters":[{"name":"...","type":"any"}],"return":["table"]},{"description":"Appends value to the end of the specified table.","name":"append","parameters":[{"name":"table","type":"table"},{"name":"value","type":"any"}],"return":[]},{"description":"Inserts value into table at the specified position.","name":"insert","parameters":[{"name":"table","type":"table"},{"name":"value","type":"any"},{"name":"position","type":"number"}],"return":[]},{"description":"Removes the element at the specified position from table.","name":"remove","parameters":[{"name":"table","type":"table"},{"name":"position","type":"number"}],"return":[]},{"description":"Finds the value in table starting from init and returns the key of the found value.","name":"find","parameters":[{"name":"table","type":"table"},{"name":"value","type":"any"},{"name":"init","type":"number?"}],"return":["any"]},{"description":"Sorts the elements in table according to the specified order function.","name":"sort","parameters":[{"name":"table","type":"table"},{"name":"order","type":"function?"}],"return":[]},{"description":"Returns the number of elements in the specified table.","name":"length","parameters":[{"name":"table","type":"table"}],"return":["number"]}],"name":"table"},{"api":[{"description":"Loads the model from its retrostudio id. The success output returns true or false based on whether or not it successfully loads. If success is true and LoadedModel is nil then there was no model at that id. Loading blocks may only be used 5 + (5 * number of players) times per minute.","name":"InsertModel","parameters":[{"name":"ID","type":"number"},{"name":"Parent","type":"object"}],"return":["Success","LoadedModel"]},{"description":"Returns a bool based on whether or not the game has loaded.","name":"IsGameLoaded","parameters":[],"return":["Answer"]},{"description":"Returns the time era of this place.","name":"GetRobloxVersion","parameters":[],"return":["Answer"]},{"description":"Returns a bool based on whether or not this script is running in studio.","name":"IsStudio","parameters":[],"return":["Answer"]},{"description":"Returns a bool based on whether or not this script is running in a solo game server.","name":"IsPlayingSolo","parameters":[],"return":["Answer"]},{"description":"Returns a bool based on if a player is a guest or not.","name":"IsGuest","parameters":[{"name":"Player","type":"object"}],"return":["Answer"]},{"description":"Detects if the game is running on a touchscreen device.","name":"IsTouchscreen","parameters":[],"return":["Answer"]},{"description":"Returns the real world time in seconds.","name":"OsTime","parameters":[],"return":["Answer"]},{"description":"Returns the amount of CPU time used in seconds. This is high precision and can be used for benchmarking.","name":"OsClock","parameters":[],"return":["Answer"]},{"description":"Returns date/time information based on the given time, Timezone must either be '*t' (local time) or '!*t' (UTC time | Default)","name":"OsDate","parameters":[{"name":"Time","type":"number"},{"name":"Timezone","type":"string"}],"return":["DateTable"]},{"description":"Returns a bool based on if a player is friends with another player.","name":"IsFriendsWith","parameters":[{"name":"Player","type":"object"},{"name":"UserId","type":"number"}],"return":["Result"]},{"description":"Returns a bool based on if a player is in a certain group or not.","name":"IsInGroup","parameters":[{"name":"Player","type":"object"},{"name":"GroupId","type":"number"}],"return":["Result"]},{"description":"Returns the rank the user holds in a group.","name":"GetRankInGroup","parameters":[{"name":"Player","type":"object"},{"name":"GroupId","type":"number"}],"return":["Result"]},{"description":"Returns a table of everything selected in studio. This is for plugins and should not be used in game.","name":"GetStudioSelection","parameters":[],"return":["Selection"]},{"description":"Reloads the place (Does not work in Studio), same function as the '!reloadplace' command.","name":"ReloadPlace","parameters":[],"return":[]},{"description":"Inserts a player's RetroStudio Avatar.","name":"InsertRetrostudioAvatar","parameters":[{"name":"ID","type":"number"},{"name":"CFrame","type":"CFrame"}],"return":["Model"]},{"description":"Returns the server epoch time in seconds.","name":"GetServerTimeNow","parameters":[],"return":["Answer"]},{"description":"Prints the scripts entire memory table. Useful for advanced debugging.","name":"DumpMemory","parameters":[],"return":[]}],"name":"retrostudio"}]